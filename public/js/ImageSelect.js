/* src/components/client/ImageSelect.html generated by Svelte v2.15.3 */
var ImageSelect = (function() { "use strict";

	function data() {
  return {
    chapters: []
  }
};

	var methods = {
  fetchChapters() {
    return fetch('/fetchChapters')
    .then(res => res.json())
				.then((data) => {
      let chapterArr = [];
      chapterArr.push(data);
      this.set({chapters: chapterArr})
    })
  },
  activateForm() {
    this.set({formIsActive: true});
  }
};

	function oncreate() {
  this.fetchChapters();
};

	function add_css() {
		var style = createElement("style");
		style.id = 'svelte-1dp22j0-style';
		style.textContent = "#story.svelte-1dp22j0,#chapter.svelte-1dp22j0,.chapter-button.svelte-1dp22j0,.chapter-form.svelte-1dp22j0{display:none}.chapter-button.-active.svelte-1dp22j0,.chapter-form.-active.svelte-1dp22j0{display:block}.chapter-form.svelte-1dp22j0 ._centered.svelte-1dp22j0{margin-top:2rem}.chapter-form.svelte-1dp22j0 ._centered>.svelte-1dp22j0{margin-left:1rem;margin-right:1rem}";
		append(document.head, style);
	}

	function click_handler(event) {
		const { component } = this._svelte;

		component.fetchChapters();
	}

	function get_each_context(ctx, list, i) {
		const child_ctx = Object.create(ctx);
		child_ctx.chapter = list[i];
		child_ctx.index = i;
		return child_ctx;
	}

	function create_main_fragment(component, ctx) {
		var div0, button, div0_class_value, text1, div2, div1, text3, div2_class_value;

		function click_handler(event) {
			component.activateForm();
		}

		var each_value = ctx.chapters;

		var each_blocks = [];

		for (var i = 0; i < each_value.length; i += 1) {
			each_blocks[i] = create_each_block(component, get_each_context(ctx, each_value, i));
		}

		return {
			c() {
				div0 = createElement("div");
				button = createElement("button");
				button.textContent = "Add a chapter";
				text1 = createText("\n\n");
				div2 = createElement("div");
				div1 = createElement("div");
				div1.textContent = "Choose an image";
				text3 = createText("\n  ");

				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].c();
				}
				addListener(button, "click", click_handler);
				button.className = "button";
				div0.className = div0_class_value = "chapter-button " + (ctx.formIsActive ? '' : '-active') + " svelte-1dp22j0";
				div1.className = "_center _spaced";
				div2.className = div2_class_value = "chapter-form " + (ctx.formIsActive ? '-active' : '') + " svelte-1dp22j0";
			},

			m(target, anchor) {
				insert(target, div0, anchor);
				append(div0, button);
				insert(target, text1, anchor);
				insert(target, div2, anchor);
				append(div2, div1);
				append(div2, text3);

				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].m(div2, null);
				}
			},

			p(changed, ctx) {
				if ((changed.formIsActive) && div0_class_value !== (div0_class_value = "chapter-button " + (ctx.formIsActive ? '' : '-active') + " svelte-1dp22j0")) {
					div0.className = div0_class_value;
				}

				if (changed.storyId || changed.chapters) {
					each_value = ctx.chapters;

					for (var i = 0; i < each_value.length; i += 1) {
						const child_ctx = get_each_context(ctx, each_value, i);

						if (each_blocks[i]) {
							each_blocks[i].p(changed, child_ctx);
						} else {
							each_blocks[i] = create_each_block(component, child_ctx);
							each_blocks[i].c();
							each_blocks[i].m(div2, null);
						}
					}

					for (; i < each_blocks.length; i += 1) {
						each_blocks[i].d(1);
					}
					each_blocks.length = each_value.length;
				}

				if ((changed.formIsActive) && div2_class_value !== (div2_class_value = "chapter-form " + (ctx.formIsActive ? '-active' : '') + " svelte-1dp22j0")) {
					div2.className = div2_class_value;
				}
			},

			d(detach) {
				if (detach) {
					detachNode(div0);
				}

				removeListener(button, "click", click_handler);
				if (detach) {
					detachNode(text1);
					detachNode(div2);
				}

				destroyEach(each_blocks, detach);
			}
		};
	}

	// (8:2) {#each chapters as chapter, index}
	function create_each_block(component, ctx) {
		var div0, img, img_src_value, text0, div1, button, text2, form, input0, input0_value_value, text3, input1, text4, input2, text5;

		return {
			c() {
				div0 = createElement("div");
				img = createElement("img");
				text0 = createText("\n    ");
				div1 = createElement("div");
				button = createElement("button");
				button.textContent = "Swap image";
				text2 = createText("\n      ");
				form = createElement("form");
				input0 = createElement("input");
				text3 = createText("\n        ");
				input1 = createElement("input");
				text4 = createText("\n        ");
				input2 = createElement("input");
				text5 = createText("\n    ");
				img.src = img_src_value = "images/covers/" + ctx.chapter.imageSrc;
				img.alt = "";
				img.width = "400";

				button._svelte = { component };

				addListener(button, "click", click_handler);
				button.className = "button -outline svelte-1dp22j0";
				setAttribute(input0, "type", "text");
				input0.name = "chapter";
				input0.id = "chapter";
				input0.value = input0_value_value = ctx.chapter._id;
				input0.className = "svelte-1dp22j0";
				setAttribute(input1, "type", "text");
				input1.name = "story";
				input1.id = "story";
				input1.value = ctx.storyId;
				input1.className = "svelte-1dp22j0";
				setAttribute(input2, "type", "submit");
				input2.className = "button";
				input2.value = "Use this image";
				form.action = "/addChapter";
				form.method = "post";
				form.className = "svelte-1dp22j0";
				div1.className = "_centered svelte-1dp22j0";
			},

			m(target, anchor) {
				insert(target, div0, anchor);
				append(div0, img);
				insert(target, text0, anchor);
				insert(target, div1, anchor);
				append(div1, button);
				append(div1, text2);
				append(div1, form);
				append(form, input0);
				append(form, text3);
				append(form, input1);
				append(form, text4);
				append(form, input2);
				append(div1, text5);
			},

			p(changed, ctx) {
				if ((changed.chapters) && img_src_value !== (img_src_value = "images/covers/" + ctx.chapter.imageSrc)) {
					img.src = img_src_value;
				}

				if ((changed.chapters) && input0_value_value !== (input0_value_value = ctx.chapter._id)) {
					input0.value = input0_value_value;
				}

				if (changed.storyId) {
					input1.value = ctx.storyId;
				}
			},

			d(detach) {
				if (detach) {
					detachNode(div0);
					detachNode(text0);
					detachNode(div1);
				}

				removeListener(button, "click", click_handler);
			}
		};
	}

	function ImageSelect(options) {
		init(this, options);
		this._state = assign(data(), options.data);
		this._intro = true;

		if (!document.getElementById("svelte-1dp22j0-style")) add_css();

		this._fragment = create_main_fragment(this, this._state);

		this.root._oncreate.push(() => {
			oncreate.call(this);
			this.fire("update", { changed: assignTrue({}, this._state), current: this._state });
		});

		if (options.target) {
			this._fragment.c();
			this._mount(options.target, options.anchor);

			flush(this);
		}
	}

	assign(ImageSelect.prototype, {
	 	destroy: destroy,
	 	get: get,
	 	fire: fire,
	 	on: on,
	 	set: set,
	 	_set: _set,
	 	_stage: _stage,
	 	_mount: _mount,
	 	_differs: _differs
	 });
	assign(ImageSelect.prototype, methods);

	ImageSelect.prototype._recompute = noop;

	function createElement(name) {
		return document.createElement(name);
	}

	function append(target, node) {
		target.appendChild(node);
	}

	function createText(data) {
		return document.createTextNode(data);
	}

	function addListener(node, event, handler, options) {
		node.addEventListener(event, handler, options);
	}

	function insert(target, node, anchor) {
		target.insertBefore(node, anchor);
	}

	function detachNode(node) {
		node.parentNode.removeChild(node);
	}

	function removeListener(node, event, handler, options) {
		node.removeEventListener(event, handler, options);
	}

	function destroyEach(iterations, detach) {
		for (var i = 0; i < iterations.length; i += 1) {
			if (iterations[i]) iterations[i].d(detach);
		}
	}

	function setAttribute(node, attribute, value) {
		if (value == null) node.removeAttribute(attribute);
		else node.setAttribute(attribute, value);
	}

	function init(component, options) {
		component._handlers = blankObject();
		component._slots = blankObject();
		component._bind = options._bind;
		component._staged = {};

		component.options = options;
		component.root = options.root || component;
		component.store = options.store || component.root.store;

		if (!options.root) {
			component._beforecreate = [];
			component._oncreate = [];
			component._aftercreate = [];
		}
	}

	function assign(tar, src) {
		for (var k in src) tar[k] = src[k];
		return tar;
	}

	function assignTrue(tar, src) {
		for (var k in src) tar[k] = 1;
		return tar;
	}

	function flush(component) {
		component._lock = true;
		callAll(component._beforecreate);
		callAll(component._oncreate);
		callAll(component._aftercreate);
		component._lock = false;
	}

	function destroy(detach) {
		this.destroy = noop;
		this.fire('destroy');
		this.set = noop;

		this._fragment.d(detach !== false);
		this._fragment = null;
		this._state = {};
	}

	function get() {
		return this._state;
	}

	function fire(eventName, data) {
		var handlers =
			eventName in this._handlers && this._handlers[eventName].slice();
		if (!handlers) return;

		for (var i = 0; i < handlers.length; i += 1) {
			var handler = handlers[i];

			if (!handler.__calling) {
				try {
					handler.__calling = true;
					handler.call(this, data);
				} finally {
					handler.__calling = false;
				}
			}
		}
	}

	function on(eventName, handler) {
		var handlers = this._handlers[eventName] || (this._handlers[eventName] = []);
		handlers.push(handler);

		return {
			cancel: function() {
				var index = handlers.indexOf(handler);
				if (~index) handlers.splice(index, 1);
			}
		};
	}

	function set(newState) {
		this._set(assign({}, newState));
		if (this.root._lock) return;
		flush(this.root);
	}

	function _set(newState) {
		var oldState = this._state,
			changed = {},
			dirty = false;

		newState = assign(this._staged, newState);
		this._staged = {};

		for (var key in newState) {
			if (this._differs(newState[key], oldState[key])) changed[key] = dirty = true;
		}
		if (!dirty) return;

		this._state = assign(assign({}, oldState), newState);
		this._recompute(changed, this._state);
		if (this._bind) this._bind(changed, this._state);

		if (this._fragment) {
			this.fire("state", { changed: changed, current: this._state, previous: oldState });
			this._fragment.p(changed, this._state);
			this.fire("update", { changed: changed, current: this._state, previous: oldState });
		}
	}

	function _stage(newState) {
		assign(this._staged, newState);
	}

	function _mount(target, anchor) {
		this._fragment[this._fragment.i ? 'i' : 'm'](target, anchor || null);
	}

	function _differs(a, b) {
		return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
	}

	function noop() {}

	function blankObject() {
		return Object.create(null);
	}

	function callAll(fns) {
		while (fns && fns.length) fns.shift()();
	}
	return ImageSelect;
}());